{"version":3,"file":"static/js/403.42f0e6c5.chunk.js","mappings":"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","sources":["components/Chat/Chat.jsx","components/Input/Input.jsx","components/Header/Header.jsx","components/Home/Home.jsx"],"sourcesContent":["import React, {useRef, useEffect} from \"react\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, AvatarBadge, Grid, GridItem } from '@chakra-ui/react';\r\nimport VerifiedIcon from '@mui/icons-material/Verified';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nfunction Chat({ data }) {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n    const scrollableDivRef = useRef(null);\r\n    const darkTheme = useSelector((state) => state.darkMode);\r\n\r\n    useEffect(() => {\r\n        scrollableDivRef.current?.scrollIntoView({ behaivour: \"smooth\" });\r\n    }, [data])\r\n\r\n    return (\r\n        <div className={\"chat-big-box \"} ref={scrollableDivRef}>\r\n            <div className={\"chat \" + (!darkTheme ? \"\" : \"dark-panel\")}>\r\n                <Grid templateColumns=\"1fr 14fr\" gap=\"0.5rem\" className={userInfo.user._id == data.sender._id ? \"myChats\" : \"chats\"}>\r\n                    <GridItem\r\n                        justifySelf=\"left\"\r\n                        alignSelf=\"start\"\r\n                        className=\"avatar\"\r\n                    >\r\n                        {userInfo.user._id != data.sender._id && <Avatar src={data.sender.resizedPicture} name=\"Profile Picture\" >\r\n                            <AvatarBadge >\r\n                                <VerifiedIcon id=\"verified-icon-svg\"/>\r\n                            </AvatarBadge>\r\n                        </Avatar>}\r\n                    </GridItem>\r\n                    <GridItem\r\n                        fontSize=\"1.2rem\"\r\n                    >\r\n                        <div className={userInfo.user._id == data.sender._id ? \"myChatText\" : \"chatText\"}>\r\n                            {userInfo.user._id != data.sender._id\r\n                                ?\r\n                                <div className=\"sender-name-time\">\r\n                                    {data.chatId.isGroup ? <span className=\"sender-name\">{data.sender.name}</span> : <span></span>}\r\n                                    <span  className=\"sender-chat\">{data.createdAt.split(\"T\")[1].split(\".\")[0].slice(0, 5)}</span>\r\n                                </div>\r\n                                :\r\n                                <div className=\"sender-name-time\">\r\n                                    <span></span>\r\n                                    <span  className=\"sender-chat\">{data.createdAt.split(\"T\")[1].split(\".\")[0].slice(0, 5)}</span>\r\n                                </div>\r\n                            }\r\n                            <div>{data.text}</div>\r\n                        </div>\r\n                    </GridItem>\r\n                </Grid>\r\n            </div>\r\n            {/* {props.showDateLine && <p><span>{data.createdAt.split(\"T\")[0]}</span></p>} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React, { useState } from \"react\";\r\nimport { Grid, GridItem} from \"@chakra-ui/react\";\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./Input.css\";\r\n\r\nfunction InputChat({onSubmit}) {\r\n    const darkTheme = useSelector((state)=>state.darkMode);\r\n    const [newChat, setnewChat] = useState(\"\");\r\n\r\n    function handleChange(event) {\r\n        setnewChat(event.target.value);\r\n    }\r\n\r\n    function triggerSendMessage(e){\r\n        if(e.key === \"Enter\" && newChat){\r\n            handleSubmit();\r\n        }\r\n    }\r\n\r\n    function handleSubmit(){\r\n        onSubmit(newChat);\r\n        setnewChat(\"\");\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <Grid templateColumns=\"auto 55px\" className={\"inputBox\" + (darkTheme ? \" dark-input\" : \"\")}>\r\n            <GridItem>\r\n                <input id=\"chat-input\" className={darkTheme ? \"dark-input\" : \"\"} type=\"text\" onKeyDown={triggerSendMessage} onChange={handleChange} placeholder=\"Reply\" name=\"chat\" value={newChat} />\r\n            </GridItem>\r\n            <GridItem\r\n                justifySelf=\"center\"\r\n                alignSelf=\"center\"\r\n                padding=\"13px 15px\"\r\n            >\r\n                <SendIcon onClick={handleSubmit} />\r\n            </GridItem>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default InputChat;","import React from \"react\";\r\nimport { Avatar, Grid, GridItem } from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./Header.css\";\r\nimport { useChat } from \"../../context/ChatContext\";\r\nimport { changePopupImage, togglePopup } from \"../../Features/popupImageSlice\";\r\n\r\nfunction Header() {\r\n    const darkTheme = useSelector((state) => state.darkMode);\r\n    const { selectedChat } = useChat();\r\n    const dispatch=useDispatch();\r\n\r\n    function getChatName(){\r\n        const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n        if(userInfo.user._id == selectedChat.users[0]._id) return selectedChat.users[1].name;\r\n        else return selectedChat.users[0].name;\r\n    }\r\n\r\n    function getPicturePath(){\r\n        const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n        if(userInfo.user._id == selectedChat.users[0]._id) return selectedChat.users[1].resizedPicture;\r\n        else return selectedChat.users[0].resizedPicture;\r\n    }\r\n\r\n    const triggerModal = (e) => {\r\n        const url=e.target.src;\r\n        dispatch(togglePopup());\r\n        dispatch(changePopupImage(url));\r\n    }\r\n\r\n    return (\r\n        <div className={\"header\" + (darkTheme ? \" dark-theme-font\" : \"\")}>\r\n            <Grid className=\"name-and-avatar\" templateColumns=\"1fr 10fr 1fr\" gap=\"0.5rem\">\r\n                <GridItem\r\n                    justifySelf=\"left\"\r\n                    alignSelf=\"center\"\r\n                    className=\"avatar\"\r\n                >\r\n                    <Avatar src={selectedChat.isGroup ? selectedChat.picturePath : getPicturePath()} onClick={triggerModal} name={selectedChat.isGroup ? selectedChat.name : getChatName()} />\r\n                </GridItem>\r\n                <GridItem\r\n                    fontSize=\"1.2rem\"\r\n                    paddingLeft=\".75rem\"\r\n                    className=\"chatName\"\r\n                >\r\n                    <span>{selectedChat.isGroup ? selectedChat.name : getChatName()}</span>\r\n                </GridItem>\r\n                <GridItem\r\n                    justifySelf=\"right\"\r\n                    alignSelf=\"center\"\r\n                    className=\"chat-options\"\r\n                >\r\n                    {selectedChat.isGroup ? <EditIcon className=\"headingIcon\" boxSize={25} /> : null }\r\n                </GridItem>\r\n            </Grid>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Grid, GridItem } from \"@chakra-ui/react\";\r\nimport Chat from \"../Chat/Chat\";\r\nimport InputChat from \"../Input/Input\";\r\nimport Header from \"../Header/Header\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport \"./Home.css\";\r\nimport { useChat } from \"../../context/ChatContext\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://localhost:8080\";\r\nlet socket, selectedChatCompare;\r\n\r\nfunction Home() {\r\n  const [chats, setChats] = useState([]);\r\n  const [mode, setMode] = useState(\"Online\");\r\n  const { selectedChat, setSelectedChat } = useChat();\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const scrollableDivRef = useRef(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.on(\"connect\", ()=>setSocketConnected(true));\r\n  }, [])\r\n\r\n  async function getChats() {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n    if (!selectedChat) return;\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/messages/${selectedChat._id}`, {\r\n        method: \"GET\",\r\n        cache: \"no-cache\",\r\n        credentials: \"same-origin\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`\r\n        },\r\n        redirect: \"follow\",\r\n        referrerPolicy: \"no-referrer\",\r\n      });\r\n      const result = await response.json();\r\n      setChats(result);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    socket.on(\"message received\", (newMessageReceived)=>{\r\n      if(!selectedChatCompare || selectedChatCompare._id != newMessageReceived.chatId._id){\r\n        // notifications...\r\n      }else {\r\n        setChats([...chats, newMessageReceived]);\r\n      }\r\n    })\r\n  });\r\n\r\n  useEffect(() => {\r\n    getChats();\r\n    selectedChatCompare=selectedChat;\r\n  }, [selectedChat])\r\n\r\n  async function sendMessage(newChat) {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n    const data = {\r\n      text: newChat,\r\n      chatId: selectedChat._id\r\n    }\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/messages\", {\r\n        method: \"POST\",\r\n        cache: \"no-cache\",\r\n        credentials: \"same-origin\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`\r\n        },\r\n        redirect: \"follow\",\r\n        referrerPolicy: \"no-referrer\",\r\n        body: JSON.stringify(data),\r\n      });\r\n      const result = await response.json();\r\n      socket.emit(\"newMessage\", result);\r\n      setChats([...chats, result]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n      <Grid templateRows=\"1.5fr 8fr 1.5fr\" height=\"90vh\" gap=\"10px\">\r\n        <GridItem\r\n        >\r\n          <Header />\r\n          {mode == \"Offline\" && <p style={{ \"color\": \"red\", \"textAlign\": \"center\", \"backgroundColor\": \"#ffd400\", \"padding\": \"6px\", \"margin\": \"-10px -20px\" }}>You are offline!! Go online to view new chats.</p>}\r\n        </GridItem>\r\n        <GridItem\r\n          className=\"chatBox\"\r\n          ref={scrollableDivRef}\r\n        >\r\n          <ScrollableFeed>\r\n            {\r\n              [...chats].map((chat) => {\r\n                return (\r\n                  <Chat key={chat._id} data={chat} />\r\n                )\r\n              })\r\n            }\r\n          </ScrollableFeed>\r\n        </GridItem>\r\n        <GridItem\r\n        >\r\n          <InputChat onSubmit={sendMessage} />\r\n        </GridItem>\r\n      </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"names":["_ref","data","userInfo","JSON","parse","localStorage","getItem","scrollableDivRef","useRef","darkTheme","useSelector","state","darkMode","useEffect","_scrollableDivRef$cur","current","scrollIntoView","behaivour","_jsx","className","ref","children","_jsxs","Grid","templateColumns","gap","user","_id","sender","GridItem","justifySelf","alignSelf","Avatar","src","resizedPicture","name","AvatarBadge","VerifiedIcon","id","fontSize","chatId","isGroup","createdAt","split","slice","text","onSubmit","newChat","setnewChat","useState","handleSubmit","type","onKeyDown","e","key","onChange","event","target","value","placeholder","padding","SendIcon","onClick","selectedChat","useChat","dispatch","useDispatch","getChatName","users","picturePath","url","togglePopup","changePopupImage","paddingLeft","EditIcon","boxSize","socket","selectedChatCompare","chats","setChats","mode","setMode","setSelectedChat","socketConnected","setSocketConnected","loading","setLoading","io","on","newMessageReceived","async","response","fetch","concat","method","cache","credentials","headers","Authorization","token","redirect","referrerPolicy","result","json","emit","error","console","log","getChats","templateRows","height","Header","style","ScrollableFeed","map","chat","Chat","InputChat","body","stringify"],"sourceRoot":""}